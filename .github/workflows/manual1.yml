name: Manual Build Windows/x64

on:
  workflow_dispatch:
    inputs:
      manualbranch:
        description: 'Enter branch'
        required: true
        default: 'main'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository with Submodules
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.manualbranch }}
          submodules: recursive

      - name: Create Build Directory
        run: mkdir _build

      - name: Configure with CMake
        shell: pwsh
        run: |
          cd _build
          & cmake -A x64 -T ClangCL ..

      - name: Build with CMake
        shell: pwsh
        run: |
          cd _build
          & cmake --build . --config RelWithDebInfo --parallel

      - name: Upload Build Artifacts
        id: upload-build-artifacts 
        uses: actions/upload-artifact@v4
        with:
          name: ectool
          path: |
            _build/src/RelWithDebInfo/ectool.exe
            _build/src/RelWithDebInfo/ectool.pdb

      - name: Diag
        id: short_sha_8
        run: |
          cd _build/src/RelWithDebInfo
          Compress-Archive -Path "ectool.exe","ectool.pdb" -DestinationPath ectool.zip
          dir
          $shortSha = $env:GITHUB_SHA.Substring(0,8)
          echo "STORTSHA=$shortSha" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "vars.STORTSHA=$shortSha" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          $env:shortSha = $shortSha
          "SELECTED_COLOR=$shortSha" >> $env:GITHUB_OUTPUT
          Write-Output "Short SHA: $shortSha"

      - name: Set color
        id: color-selector
        run: |
            "SELECTED_COLOR2=green" >> $env:GITHUB_OUTPUT

      - name: Get color
        env:
          SELECTED_COLOR: ${{ steps.short_sha_8.outputs.SELECTED_COLOR }}
        run: Write-Output "The selected color is $env:SELECTED_COLOR"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.short_sha_8.outputs.SELECTED_COLOR }}
          release_name: Release aa-${{ steps.short_sha_8.outputs.SELECTED_COLOR }}-bb
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: _build/src/RelWithDebInfo/ectool.zip
          asset_name: ectool-windows-amd64-${{ steps.short_sha_8.outputs.SELECTED_COLOR }}.zip
          asset_content_type: application/zip


